<?php

/**
 * @file
 * Order Reports for Drupal Commerce
 *
 * This file contains all the major functionality for adding robust reporting
 * to the Drupal Commerce system.
 */

/**
 * Implements hook_entity_info().
 */
function commerce_order_reports_entity_info() {
  return array(
    'commerce_order_reports' => array(
      'label' => t('Order Report Entry'),
      'controller class' => 'CommerceOrderReportsEntityController',
      'base table' => 'commerce_order_reports',
      'load hook' => 'commerce_order_reports_load',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'order_id',
      ),
    ),
  );
}

/**
 * Returns an initialized order object.
 *
 * @param $order_id
 *   The id of the order.
 * @param $order_number
 *   The order number, @todo: remove as parameter and set in entity controller on save.
 * @param $uid
 *   User id for the order
 *
 * @return
 *   An order report object with all default fields initialized.
 */
function commerce_order_reports_new($order_id, $order_number, $uid = 0) {
  if(!$order_id || !$order_number) return;

  return entity_get_controller('commerce_order_reports')->create(array(
    'order_id' => $order_id,
    'order_number' => $order_number,
    'uid' => $uid,
    'type' => 'commerce_order_reports',
  ));
}

/**
 * Saves an order report entity.
 *
 * @return
 *   SAVED_NEW or SAVED_UPDATED depending on the operation performed.
 */
function commerce_order_reports_save($order_report) {
  return entity_get_controller('commerce_order_reports')->save($order_report);
}

/**
 * Loads an order report by order ID.
 */
function commerce_order_reports_load($order_id) {
  $order_reports = commerce_order_reports_load_multiple(array($order_id), array());
  return $order_reports ? reset($order_reports) : FALSE;
}

/**
 * Loads an order report by order number.
 */
function commerce_order_reports_load_by_number($order_number) {
  $order_reports = commerce_order_reports_load_multiple(array(), array('order_number' => $order_number));
  return $order_reports ? reset($order_reports) : FALSE;
}

/**
 * Loads multiple orders by ID or based on a set of matching conditions.
 *
 * @see entity_load()
 *
 * @param $order_ids
 *   An array of order IDs.
 * @param $conditions
 *   An array of conditions to filter loaded orders by on the {commerce_order}
 *   table in the form 'field' => $value. Specifying a revision_id will load the
 *   requested revision of the order identified either by a similar condition or
 *   the $order_ids array assuming the revision_id is valid for the order_id.
 * @param $reset
 *   Whether to reset the internal order loading cache.
 *
 * @return
 *   An array of order report objects indexed by order_id.
 */
function commerce_order_reports_load_multiple($order_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('commerce_order_reports', $order_ids, $conditions, $reset);
}

/**
 * Implements hook_views_api().
 */
function commerce_order_reports_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'commerce_order_reports') . '/includes/views',
  );
}


/**
 *  Implements hook_views_query_alter().
 *  @todo may have to make custom views handler instead.
 */
function commerce_order_reports_views_query_alter(&$view, &$query) {
  if ($view->name == 'commerce_order_reports_monthly') {

    $field_alias = 'commerce_order_reports_created_granularity';
    $query->add_field('commerce_order_reports', 'created', 'commerce_order_reports_created_granularity', array());

    //$field_name = views_date_sql_format('Y-m', 'commerce_order_reports.created');
    $field_name = 'DAY(FROM_UNIXTIME(commerce_order_reports_created_granularity))';
    $query->add_groupby($field_name);
    dpm($query);
  }
}

/**
 * Implements hook_views_pre_render().
 */
function commerce_order_reports_views_pre_render(&$view) {
  if ($view->name == 'commerce_order_reports_daily') {
    drupal_add_css(drupal_get_path('module', 'commerce_order_reports') . '/theme/commerce_order_reports.css');
    $view->attachment_before = commerce_order_reports_daily_report_header($view);
  }
}

/**
 * Creates header for the daily report
 * @todo  look into theme('table')
 */
function commerce_order_reports_daily_report_header($view) {

  $output = '
  <table class="daily-report-header">
    <thead>
      <tr>
        <th>Number of Orders</th>
        <th>Number of Products</th>
        <th>Average Order</th>
        <th>Gross</th>
        <th>Revenue</th>
        <th>Taxes</th>
        <th>Shipping</th>
      </tr>
    </thead>
  ';
  $gross_total = 0;
  $overall_subtotal = 0;
  $overall_taxes = 0;
  $overall_shipping = 0;
  $total_products = 0;

  foreach($view->result as $orders) {

    //Load Commerce Order object
    $commerce_order_id = $orders->commerce_order_reports_order_id;
    $commerce_order = commerce_order_load($commerce_order_id);

    //Load up Commerce Order entity wrapper
    $commerce_order_wrapper = entity_metadata_wrapper('commerce_order', $commerce_order);

    //Find out number of products sold
    $order_line_items = $commerce_order_wrapper->commerce_line_items->value();
    foreach($order_line_items as $line_item) {
      # @todo: This is too restrictive!
      if($line_item->type == 'product') {
        $total_products = $total_products + $line_item->quantity;
      }
    }

    //Calculate different price totals
    $gross_total = $gross_total + $commerce_order_wrapper->commerce_order_total->amount->value();
    $overall_subtotal = $overall_subtotal + commerce_order_reports_order_base_total($commerce_order);
    $overall_taxes = $overall_taxes + commerce_order_reports_order_tax_total($commerce_order);
    $overall_shipping = $overall_shipping + commerce_order_reports_order_shipping_total($commerce_order);
  }

  $average_order_total = ($gross_total > 0) ? $gross_total / count($view->result) : 0;

  //Format currency variables
  $gross_total = commerce_currency_format($gross_total, commerce_default_currency());
  $average_order_total = commerce_currency_format($average_order_total, commerce_default_currency());
  $overall_subtotal = commerce_currency_format($overall_subtotal, commerce_default_currency());
  $overall_taxes = commerce_currency_format($overall_taxes, commerce_default_currency());
  $overall_shipping = commerce_currency_format($overall_shipping, commerce_default_currency());

  $output .='
    <tbody>
      <tr>
        <td>' . count($view->result) . '</td>
        <td>' . $total_products . '</td>
        <td>' . $average_order_total . '
        <td>' . $gross_total . '</td>
        <td>' . $overall_subtotal . '</td>
        <td>' . $overall_taxes . '</td>
        <td>' . $overall_shipping . '</td>
      </tr>
    </tbody>
  </table>
  ';

  return $output;
}

/**
 * Rules Action function to create new Commerce Order Reports entity,
 *  returns entity wrapper in case user wishes further data sets.
 * @param  commerce_order $commerce_order
 * @return entity_wrapper
 */
function commerce_order_report_add_entry($commerce_order) {
  if(!isset($commerce_order->order_id)) return;
  //Grab data from Commerce Order
  $order_id = $commerce_order->order_id;
  $order_number = $commerce_order->order_number;
  $order_uid = $commerce_order->uid;

  //Create new entity
  $order_report_entity = commerce_order_reports_new($order_id, $order_number, $order_uid);

  $entity_wrapper = entity_metadata_wrapper('commerce_order_reports', $order_report_entity);
  $entity_wrapper->save();
  return $entity_wrapper;
}

/**
 * Gathers tax price components from order and returns unformatted currency amount
 * @param  commerce_order $commerce_order
 * @return raw currency amount
 */
function commerce_order_reports_order_tax_total($commerce_order) {

  if(!is_object($commerce_order)) return;

  //Load entity wrapper for commerce order
  $order_wrapper = entity_metadata_wrapper('commerce_order', $commerce_order);

  //Get the pricing components for the commerce order
  $order_pricing_data = $order_wrapper->commerce_order_total->data->value();
  $order_price_components = $order_pricing_data['components'];

  $order_tax = 0;

  foreach($order_price_components as $component) {
    if(isset($component['price']['data']['tax_rate']) && is_array($component['price']['data']['tax_rate'])) {
      $order_tax = $order_tax + $component['price']['amount'];
    }
  }

  return $order_tax;
}

/**
 * Cycles through each line item, except shipping, to calculate order total.
 * Allows for recognition of discounts.
 * @param  commerce_order $commerce_order
 * @return raw currency amount
 */
function commerce_order_reports_order_base_total($commerce_order) {

  if(!is_object($commerce_order)) return;

  //Load entity wrapper for commerce order
  $order_wrapper = entity_metadata_wrapper('commerce_order', $commerce_order);

  //Get the line items attached to the order
  $order_line_items = $order_wrapper->commerce_line_items->value();

  //Setup order total variable
  $order_total = 0;

  foreach($order_line_items as $line_item) {
    //We want to ignore shipping, since we're cataloging that else where.
    if($line_item->type == 'shipping') continue;
    //Total up each line item's cost.
    $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
    $order_total = $order_total + $line_item_wrapper->commerce_total->amount->value();
  }

  return $order_total;
}

/**
 * Cycles through each line item and grabs shipping amount
 * @param  commerce_order $commerce_order
 * @return raw currency amount
 */
function commerce_order_reports_order_shipping_total($commerce_order) {

  if(!is_object($commerce_order)) return;

  //Load entity wrapper for commerce order
  $order_wrapper = entity_metadata_wrapper('commerce_order', $commerce_order);

  //Get the line items attached to the order
  $order_line_items = $order_wrapper->commerce_line_items->value();

  //Setup order total variable
  $order_total = 0;

  foreach($order_line_items as $line_item) {
    //We want to ignore shipping, since we're cataloging that else where.
    if($line_item->type == 'shipping') {
      //@todo: Properly load entity wrapper to get value
      $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
      $order_total = $order_total + $line_item_wrapper->commerce_total->amount->value();
    }
  }

  return $order_total;
}
